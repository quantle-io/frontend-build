{"version":3,"sources":["ui-component/cards/SubCard.js","views/dashboard/Default/chart-data/stock-chart.js","views/dashboard/Default/StockChartCard.js","ui-component/cards/Skeleton/PopularCard.js","views/dashboard/Default/StockCard.js","views/AccountPage.js"],"names":["SubCard","children","content","contentClass","darkTitle","secondary","sx","title","others","theme","useTheme","border","borderColor","palette","primary","light","boxShadow","p","variant","action","opacity","className","defaultProps","ChartData","extra","extra2","height","length","type","options","colors","chart","sparkline","enabled","animations","stroke","curve","width","xaxis","labels","show","tooltip","shared","fixed","position","x","format","y","formatter","seriesName","series","name","data","useStyles","makeStyles","card","backgroundColor","padding","contentContainer","paddingBottom","color","fontStyle","fontWeight","StockChartCard","annual_ret","dataset","white","benchmark","classes","Card","CardContent","Grid","container","item","xs","alignItems","justifyContent","Typography","dark","error","main","Math","round","success","grey","cardAction","display","paddingTop","PopularCard","backtest","spacing","gridSpacing","zeroMinWidth","Skeleton","style","textAlign","flexDirection","primaryLight","cursor","divider","marginTop","marginBottom","avatarSuccess","borderRadius","marginLeft","successDark","avatarError","orange","errorDark","StockCard","isLoading","subscribed","React","useState","Fragment","MainCard","alignContent","Chip","label","float","pt","direction","Object","entries","map","key","value","AccountPage","setLoading","setDataset","positions","setPositions","account","useSelector","state","id","useParams","history","useHistory","setValue","tempValue","setTempValue","useEffect","url","configData","API_SERVER","axios","get","headers","Authorization","token","then","response","subscriptions","mapper","i","strategy","allocation","committed","public_key","md","mb","src","icon","info","equity","side","change","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","row","component","symbol","quantity","pl","LoadingButton","loading","loadingPosition","startIcon","onClick","post","saveAllocation","push","my","keys","Slider","onChange","t","index","temp","console","log","leftover","denom","scale","j","String","handleChange","target","onChangeCommitted","valueLabelDisplay","disableSwap"],"mappings":"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","file":"static/js/20.944e97b1.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@material-ui/core';\r\n\r\n//-----------------------|| CUSTOM SUB CARD ||-----------------------//\r\n\r\nconst SubCard = ({ children, content, contentClass, darkTitle, secondary, sx = {}, title, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5 }} className={contentClass}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n};\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n","//-----------------------|| DASHBOARD - BAJAJ AREA CHART ||-----------------------//\r\n\r\nconst ChartData = ({extra = [], extra2 = []}) => {\r\n    let height = 200;\r\n    if (extra2 && extra2.length != 0){\r\n        height = 400;\r\n    }\r\n    // let extra3 = [];\r\n    // for (let i = 0; i<extra2.length; i++){\r\n    //     const arr = [extra2[i][1]-100, extra2[i][1]+100];\r\n    //     extra3.push({\r\n    //         x: extra2[i][0], \r\n    //         y: arr\r\n    //     });\r\n    // }\r\n    \r\n    return {\r\n        type: 'area',\r\n        height: height,\r\n        options: {\r\n            colors: ['#1e88e5', '#808080'],\r\n            chart: {\r\n                // id: 'support-chart',\r\n                sparkline: {\r\n                    enabled: true\r\n                },\r\n                animations: {\r\n                    enabled: false\r\n                },\r\n\r\n            },\r\n            // dataLabels: {\r\n            //     enabled: false\r\n            // },\r\n            stroke: {\r\n                curve: 'smooth',\r\n                width: 3\r\n            },\r\n            xaxis: {\r\n                type: 'datetime',\r\n                labels: {show: true},\r\n                // axisTickers: {show: true}\r\n            },    \r\n            tooltip: {\r\n                // theme: 'dark',\r\n                shared: true,\r\n                fixed: {\r\n                    enabled: true,\r\n                    position: 'topLeft'\r\n                },\r\n                x: {\r\n                    show: true,\r\n                    format: 'MMM dd yyyy' // 'MMM dd yyyy, HH:mm:ss'\r\n                },\r\n                y: {\r\n                    title: {\r\n                        formatter: (seriesName) => seriesName+' Value'\r\n                    }\r\n                },\r\n                // marker: {\r\n                //     show: false\r\n                // }\r\n            },\r\n            // tooltip: {\r\n            //     fixed: {\r\n            //         enabled: false\r\n            //     },\r\n            //     x: {\r\n            //         show: true,\r\n            //     },\r\n            //     y: {\r\n            //         title: {\r\n            //             formatter: (seriesName) => 'Account Value'\r\n            //         }\r\n            //     },\r\n            //     // marker: {\r\n            //     //     show: false\r\n            //     // }\r\n            // },\r\n            // xaxis:{\r\n            //     labels: {\r\n            //         show: true,\r\n            //     }                \r\n            // },\r\n        },\r\n        series: [\r\n                {\r\n                    name: \"Strategy\",\r\n                    data: extra\r\n                },\r\n                {\r\n                    name: \"Benchmark\",\r\n                    data: extra2\r\n                },\r\n                // {\r\n                //     name: \"Standard Deviation\",\r\n                //     type: 'rangeArea',\r\n                //     data: extra3\r\n                // }\r\n            ],\r\n        }\r\n    };\r\n\r\nexport default ChartData;\r\n","import React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core';\r\n\r\n// third-party\r\nimport Chart from 'react-apexcharts';\r\n\r\n// project imports\r\nimport ChartData from 'views/dashboard/Default/chart-data/stock-chart';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        backgroundColor: theme.palette.secondary.light\r\n    },\r\n    content: {\r\n        padding: '0px !important'\r\n    },\r\n    contentContainer: {\r\n        padding: '16px',\r\n        paddingBottom: 0,\r\n        color: '#fff'\r\n    },\r\n    fontStyle: {\r\n        fontWeight: 400\r\n    }\r\n}));\r\n\r\n\r\nconst StockChartCard = ({ annual_ret, dataset, white, benchmark, title }) => {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n\r\n    const orangeDark = theme.palette.secondary[800];\r\n\r\n    // console.log(dataset);\r\n    return (\r\n        <Card className={white ? \"\": classes.card}>\r\n            <CardContent className={classes.content}>\r\n                <Grid container className={classes.contentContainer}>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                            {white ? \r\n                            <Typography variant=\"subtitle1\" sx={{ color: theme.palette.secondary.dark }}>\r\n                                { title ? title : '' }\r\n                            </Typography>\r\n                            :<Grid item>\r\n                                <Typography variant=\"subtitle1\" sx={{ color: theme.palette.secondary.dark }}>\r\n                                    Historical Performance\r\n                                </Typography>\r\n                            </Grid>}\r\n                            <Grid item>\r\n                                {annual_ret && annual_ret < 0 ?\r\n                                <Typography variant=\"h4\" sx={{ color: theme.palette.error.main }}>\r\n                                    {Math.round(annual_ret*100)/100}%\r\n                                </Typography> : annual_ret ?\r\n                                <Typography variant=\"h4\" sx={{ color: theme.palette.success.main }}>\r\n                                    {Math.round(annual_ret*100)/100}%\r\n                                </Typography>\r\n                                : <></>}\r\n                                {annual_ret ?\r\n                                <Typography alignItems=\"right\" variant=\"subtitle2\" sx={{ color: theme.palette.grey[800] }}>annually</Typography>\r\n                                : <></>}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Chart {...ChartData({extra: dataset, extra2: benchmark})} />\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default StockChartCard;\r\n","import React from 'react';\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Card, CardContent, Grid, Skeleton, Typography } from '@material-ui/core';\r\n\r\n// project imports\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// style constant\r\nconst useStyles = makeStyles({\r\n    cardAction: {\r\n        padding: '10px',\r\n        display: 'flex',\r\n        paddingTop: 0,\r\n        justifyContent: 'center'\r\n    }\r\n});\r\n\r\n//-----------------------|| SKELETON - POPULAR CARD ||-----------------------//\r\n\r\nconst PopularCard = ({ backtest }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Grid container spacing={gridSpacing}>\r\n                    <Grid item xs={12}>\r\n                        <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\r\n                            <Grid item xs zeroMinWidth>\r\n                                <Skeleton variant=\"rect\" height={20} />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Skeleton variant=\"rect\" height={20} width={20} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {backtest ?\r\n                        <Grid item xs={12} style={{height: 250, textAlign:\"center\", flexDirection: \"column\", justifyContent: \"center\", display: \"flex\"}}>\r\n                            <Typography variant=\"h4\">📈 Backtest to see results!</Typography>\r\n                        </Grid>:\r\n                        <Skeleton variant=\"rect\" height={250} />\r\n                        }\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* <Grid item xs={6}>\r\n                                <Skeleton variant=\"rect\" height={20} />\r\n                            </Grid> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* <Grid item xs={6}>\r\n                                <Skeleton variant=\"rect\" height={20} />\r\n                            </Grid> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* <Grid item xs={6}>\r\n                                <Skeleton variant=\"rect\" height={20} />\r\n                            </Grid> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            {/* <Grid item xs={6}>\r\n                                <Skeleton variant=\"rect\" height={20} />\r\n                            </Grid> */}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                    <Grid item xs={6}>\r\n                                        <Skeleton variant=\"rect\" height={20} />\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                        <Grid container alignItems=\"center\" spacing={gridSpacing} justifyContent=\"space-between\">\r\n                                            <Grid item xs zeroMinWidth>\r\n                                                <Skeleton variant=\"rect\" height={20} />\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Skeleton variant=\"rect\" height={16} width={16} />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default PopularCard;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { CardContent, Grid, Typography, Chip } from '@material-ui/core';\r\n\r\n// project imports\r\nimport StockChartCard from 'views/dashboard/Default/StockChartCard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SkeletonPopularCard from 'ui-component/cards/Skeleton/PopularCard';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardAction: {\r\n        padding: '10px',\r\n        paddingTop: 0,\r\n        justifyContent: 'center'\r\n    },\r\n    primaryLight: {\r\n        color: theme.palette.primary[200],\r\n        cursor: 'pointer'\r\n    },\r\n    divider: {\r\n        marginTop: '12px',\r\n        marginBottom: '12px'\r\n    },\r\n    avatarSuccess: {\r\n        width: '16px',\r\n        height: '16px',\r\n        borderRadius: '5px',\r\n        backgroundColor: theme.palette.success.light,\r\n        color: theme.palette.success.dark,\r\n        marginLeft: '15px'\r\n    },\r\n    successDark: {\r\n        color: theme.palette.success.dark\r\n    },\r\n    avatarError: {\r\n        width: '16px',\r\n        height: '16px',\r\n        borderRadius: '5px',\r\n        backgroundColor: theme.palette.orange.light,\r\n        color: theme.palette.orange.dark,\r\n        marginLeft: '15px'\r\n    },\r\n    errorDark: {\r\n        color: theme.palette.orange.dark\r\n    }\r\n}));\r\n\r\n//-----------------------|| DASHBOARD DEFAULT - POPULAR CARD ||-----------------------//\r\n\r\nconst StockCard = ({ isLoading, data, backtest, subscribed}) => {\r\n    const classes = useStyles();\r\n\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // var mergedTimes = [];\r\n    // for (var i = 0; i<data[\"graphs\"][\"Equity Curve\"].length; i++){\r\n    //     mergedTimes.push(data[\"graphs\"][\"Equity Curve\"][i]);\r\n    // }\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading ? (\r\n                <SkeletonPopularCard backtest={backtest} />\r\n            ) : (\r\n                <MainCard content={false} sx={{cursor: \"pointer\"}}>\r\n                    <CardContent>\r\n                        <Grid container spacing={gridSpacing}>\r\n                            <Grid item xs={12}>\r\n                                <Grid container alignContent=\"center\" justifyContent=\"space-between\">\r\n                                    <Grid item xs={12} height={\"32px\"}>\r\n                                        <Typography display=\"inline\" variant=\"h4\">{data.name}</Typography>\r\n                                        {subscribed && <Chip label=\"Subscribed\" color=\"primary\" sx={{float: \"right\"}}/>}                                        \r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item xs={12} sx={{ pt: '16px !important', textAlign:\"center\", flexDirection: \"column\" }}>\r\n                                {(!data[\"results\"][\"graphs\"][\"chart\"].length) ?                             \r\n                                <Typography variant=\"h4\">📈</Typography>\r\n                                : <StockChartCard annual_ret ={data[\"results\"][\"stats\"] ? data[\"results\"][\"stats\"][\"annualized_return\"]: 0} dataset={data[\"results\"][\"graphs\"][\"chart\"]} />\r\n                                }\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Grid container direction=\"column\">\r\n                                    {\r\n                                    Object.entries(data[\"results\"][\"stats\"])\r\n                                    .map(([key, value]) =>\r\n                                    <Grid item key={key}>\r\n                                        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                            <Grid item>\r\n                                                <Typography variant=\"subtitle1\" color=\"inherit\">\r\n                                                    {key}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                                                    <Grid item>\r\n                                                        <Typography variant=\"subtitle1\" color=\"inherit\">\r\n                                                            {Math.round(value * 100) / 100}\r\n                                                        </Typography>\r\n                                                    </Grid>\r\n                                                    {/* <Grid item>\r\n                                                        <Avatar variant=\"rounded\" className={classes.avatarSuccess}>\r\n                                                            <KeyboardArrowUpOutlinedIcon fontSize=\"small\" color=\"inherit\" />\r\n                                                        </Avatar>\r\n                                                    </Grid> */}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                \r\n\r\n                                    )}\r\n\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    {/* <CardActions className={classes.cardAction}>\r\n                        <Button size=\"small\" disableElevation>\r\n                            View All\r\n                            <ChevronRightOutlinedIcon />\r\n                        </Button>\r\n                    </CardActions> */}\r\n                </MainCard>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nStockCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default StockCard;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { SET_DATA } from 'store/actions';\r\n\r\n// material-ui\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport { Grid, Table, TableContainer, TableBody, TableHead, TableRow, TableCell, Typography, Slider, TextField, Chip} from '@material-ui/core';\r\nimport StockChartCard from 'views/dashboard/Default/StockChartCard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { useHistory } from 'react-router-dom';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\n// project imports\r\nimport { gridSpacing } from 'store/constant';\r\n\r\nimport StockCard from 'views/dashboard/Default/StockCard';\r\nimport SubCard from 'ui-component/cards/SubCard'\r\nimport configData from 'config';\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\nimport ChartData from 'views/dashboard/Default/chart-data/radarchart';\r\nimport Chart from 'react-apexcharts';\r\nimport axios from 'axios';\r\n//==============================|| TYPOGRAPHY ||==============================//\r\n\r\nconst AccountPage = () => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [dataset, setDataset] = useState({});\r\n    const [positions, setPositions] = useState(false);\r\n\r\n    const account = useSelector((state) => state.account);\r\n    let { id } = useParams();\r\n    const theme = useTheme();\r\n    let history = useHistory();\r\n\r\n    const [value, setValue]  = useState({});\r\n    const [tempValue, setTempValue]  = useState({});\r\n\r\n    useEffect(() => {\r\n        const url = configData.API_SERVER+\"users/accounts/\"+id;\r\n        axios.get(url, { headers: { Authorization: `${account.token}` } })\r\n            .then((response) => setDataset(response.data))\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const url = configData.API_SERVER+\"users/accounts/\"+id+\"/positions\";\r\n        axios.get(url, { headers: { Authorization: `${account.token}` } })\r\n            .then((response) => setPositions(response.data))\r\n    }, []);\r\n\r\n    // useEffect(() => {\r\n    //     if (!dataset.subscriptions){\r\n    //         return false;\r\n    //     }\r\n    //     let m = 0;\r\n    //     for (let i = 0; i < dataset.subscriptions.length; i++) {\r\n    //         if (dataset.subscriptions[i].id > m){\r\n    //             m = dataset.subscriptions[i].id;\r\n    //         }\r\n    //     }\r\n    //     console.log(m);\r\n    //     setValue(Array(m).fill(0));\r\n    //     setTempValue(Array(m).fill(0))\r\n    // }, [dataset]);\r\n\r\n    useEffect(() => {\r\n        if (!dataset.subscriptions){\r\n            return false;\r\n        }\r\n        let mapper = {};\r\n        for (let i = 0; i < dataset.subscriptions.length; i++) {\r\n            mapper[dataset.subscriptions[i].strategy.id] = dataset.allocation[dataset.subscriptions[i].strategy.id] || 0;\r\n        }\r\n        setValue(mapper);\r\n        setTempValue(mapper);\r\n        // console.log(dataset);\r\n        // console.log(mapper);\r\n    }, [dataset]);\r\n\r\n\r\n    const committed = () => {\r\n        setValue(tempValue);\r\n    }\r\n\r\n    const saveAllocation = () => {\r\n        setLoading(true)\r\n        const url = configData.API_SERVER+\"users/accounts/\"+id;\r\n        axios.post(url, value, { headers: { Authorization: `${account.token}` } })\r\n            .then(() => setLoading(false))\r\n\r\n        // console.log(value);\r\n    }\r\n\r\n    // const handleChange = (t, index) => {\r\n    //     let temp = [...tempValue];\r\n    //     temp[index] = t;\r\n\r\n    //     const leftover = 100 - t;\r\n    //     const denom = temp.reduce((partialSum, a) => partialSum + a, 0) - t;\r\n    //     let scale = 0;\r\n    //     if (denom !== 0){\r\n    //         scale = leftover/denom;\r\n    //     }\r\n        \r\n    //     for (let i = 0; i<value.length; i++){\r\n    //         if (i!==index){\r\n    //             temp[i] = scale*temp[i];\r\n    //         }\r\n    //     }\r\n    //     setTempValue(temp);\r\n    // }\r\n\r\n    const handleChange = (t, index) => {\r\n        // console.log(t);\r\n        // console.log(index);\r\n        let temp = {...tempValue};\r\n        temp[index] = t;\r\n        console.log(temp);\r\n\r\n        const leftover = 100 - t;\r\n        let denom = 0;\r\n        for (const [key, value] of Object.entries(temp)) {\r\n            denom = denom + value;\r\n        }\r\n        denom = denom - t;\r\n        \r\n        let scale = 0;\r\n        if (denom !== 0){\r\n            scale = leftover/denom;\r\n        }\r\n        console.log(scale);\r\n        \r\n        for (let i = 0; i < Object.keys(value).length; i++){\r\n            let j = Object.keys(value)[i];\r\n            if (String(j) !== String(index)){\r\n                temp[j] = scale*temp[j];\r\n            }\r\n        }\r\n        console.log(temp);\r\n        setTempValue(temp);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n            <Grid container>\r\n                { dataset.public_key ?\r\n                <Grid container item xs={12} spacing={gridSpacing}>\r\n                    <Grid item md={6} xs={12} spacing={gridSpacing}>\r\n                        <Grid item xs={12} sx={{mb: 4}}>\r\n                            <SubCard \r\n                                title={\r\n                                    <Grid container>\r\n                                        <Grid item xs={6}>\r\n                                            <Typography variant=\"h2\">\r\n                                                {dataset.name} \r\n                                            </Typography>\r\n                                            <Typography variant=\"h4\" >\r\n                                                {dataset.public_key}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid container item xs={6} justifyContent=\"right\">\r\n                                            <img height={50} width={50} src={dataset.icon}></img>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                }>\r\n                                <Grid container>\r\n                                    <Grid container item xs={6}>\r\n                                        <Typography variant=\"h1\" >\r\n                                            {dataset.info.equity} \r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid container item xs={6} justifyContent=\"right\">\r\n                                        {dataset.info.side ? <Chip label={dataset.info.change} color=\"success\"/>\r\n                                        : (dataset.info.side === false) ? <Chip label={dataset.info.change} color=\"error\"/>\r\n                                        : <></>\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SubCard>\r\n                        </Grid>\r\n                        {positions ? \r\n                        <Grid item xs={12}>\r\n                            <SubCard title={\r\n                                <Typography variant=\"h2\" >\r\n                                    Positions\r\n                                </Typography>}>\r\n                            \r\n                                <TableContainer>\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell align=\"left\">Asset</TableCell>\r\n                                                <TableCell align=\"left\">Quantity</TableCell>\r\n                                                <TableCell align=\"left\">Unrealized P/L</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {positions.map((row) => (\r\n                                                <TableRow\r\n                                                key={row.symbol}\r\n                                                >\r\n                                                    <TableCell align=\"left\" component=\"th\"><Typography variant=\"h4\">{row.symbol}</Typography></TableCell>\r\n                                                    <TableCell align=\"left\"><Typography variant=\"h5\">{row.quantity}</Typography></TableCell>\r\n                                                    <TableCell align=\"left\"><Typography variant=\"h5\">{row.pl}</Typography></TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n\r\n                                {/* <Chart {...ChartData()} /> */}\r\n                            </SubCard>\r\n                        </Grid>\r\n                        : <></>}\r\n                    </Grid>\r\n                    <Grid item md={6} xs={12} >\r\n                        <SubCard\r\n                        title={\r\n                            <div>\r\n                                <Typography variant=\"h1\" display=\"inline\" >\r\n                                    Linked Strategies\r\n                                </Typography>\r\n                                <LoadingButton sx={{float: \"right\"}} loading={isLoading} loadingPosition=\"start\" startIcon={<SaveIcon/>} variant=\"contained\" component=\"label\" onClick={() => saveAllocation()}>\r\n                                    Save\r\n                                </LoadingButton>\r\n                            </div>\r\n                            }>\r\n                            <Grid container item xs={12} spacing={gridSpacing}>\r\n                                <Grid item xs={12}>\r\n                                    {dataset.subscriptions.map(item => (\r\n                                        <SubCard \r\n                                            title={\r\n                                                <div>\r\n                                                    <Typography variant=\"h2\" display=\"inline\">\r\n                                                        {item.strategy.name} \r\n                                                    </Typography>\r\n                                                    <Chip sx={{float: \"right\", p: 0}} icon={<ArrowBackIcon />} label=\"Learn more\" variant=\"outlined\" \r\n                                                        onClick={() => history.push(\"/utils/strategies/\"+item.strategy.id)}\r\n                                                    />\r\n                                                </div>\r\n                                            }\r\n                                            sx={{my: 2}}>\r\n                                            {Object.keys(value).length>0 && <Slider\r\n                                                // getAriaLabel={() => console.log(item.strategy.id)}\r\n                                                value={tempValue[item.strategy.id]}\r\n                                                onChange={(t) => handleChange(t.target.value, item.strategy.id)}\r\n                                                onChangeCommitted={committed}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                disableSwap\r\n                                                />}\r\n                                            \r\n                                        </SubCard>\r\n                                    ))}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </SubCard>\r\n                    </Grid>\r\n                </Grid>: <></>\r\n                }\r\n            </Grid>\r\n    );\r\n};\r\n\r\nexport default AccountPage;\r\n"],"sourceRoot":""}