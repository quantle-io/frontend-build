{"version":3,"sources":["ui-component/cards/SubCard.js","ui-component/extended/AnimateButton.js","ui-component/cards/Skeleton/EarningCard.js","views/dashboard/Default/AddBrokerCard.js","views/dashboard/Default/VerifyAccountCard.js","views/dashboard/Default/index.js"],"names":["SubCard","children","content","contentClass","darkTitle","secondary","sx","title","others","theme","useTheme","border","borderColor","palette","primary","light","boxShadow","p","variant","action","opacity","className","defaultProps","AnimateButton","React","forwardRef","ref","offset1","offset2","type","direction","offset","scale","useCycle","x","cycleX","y","cycleY","div","animate","rotate","transition","repeat","Infinity","repeatType","duration","repeatDelay","onHoverEnd","onHoverStart","hover","tap","whileHover","whileTap","useStyles","makeStyles","cardHeading","marginRight","marginTop","marginBottom","EarningCard","classes","Card","CardContent","Grid","container","item","Skeleton","height","card","backgroundColor","main","color","overflow","position","avatar","typography","commonAvatar","largeAvatar","avatarRight","mediumAvatar","dark","zIndex","fontSize","fontWeight","subHeading","avatarCircle","cursor","smallAvatar","circleIcon","transform","menuItem","cardAction","padding","paddingTop","justifyContent","primaryLight","divider","avatarSuccess","width","borderRadius","success","marginLeft","successDark","avatarError","orange","errorDark","loginInput","customInput","AddBrokerCard","useState","isLoading","open","setOpen","brokers","setBrokers","brokerID","setBrokerID","publics","setPublic","privates","setPrivate","error","setError","account","useSelector","state","handleClose","setSelf","axios","post","configData","API_SERVER","public_key","private_key","broker_id","headers","Authorization","token","then","window","location","reload","catch","response","data","msg","useEffect","url","get","Fragment","MainCard","Button","disableElevation","fullWidth","size","onClick","Modal","onClose","margin","top","left","maxWidth","bgcolor","Typography","id","alignItems","name","Divider","spacing","gridSpacing","map","xs","md","src","icon","FormControl","InputLabel","htmlFor","OutlinedInput","value","onChange","text","target","label","inputProps","notchedOutline","FormHelperText","disabled","VerifyAccountCard","authorization","console","log","Dashboard","search","code","URLSearchParams","enabled","setEnabled","accounts","setAccounts","history","useHistory","encodeURIComponent","href","split","is_enabled","index","lg","push","info","equity","side","Chip","change"],"mappings":"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","file":"static/js/24.24fd467c.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@material-ui/styles';\r\nimport { Card, CardContent, CardHeader, Divider, Typography } from '@material-ui/core';\r\n\r\n//-----------------------|| CUSTOM SUB CARD ||-----------------------//\r\n\r\nconst SubCard = ({ children, content, contentClass, darkTitle, secondary, sx = {}, title, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Card\r\n            sx={{\r\n                border: '1px solid',\r\n                borderColor: theme.palette.primary.light,\r\n                ':hover': {\r\n                    boxShadow: '0 2px 14px 0 rgb(32 40 45 / 8%)'\r\n                },\r\n                ...sx\r\n            }}\r\n            {...others}\r\n        >\r\n            {/* card header and action */}\r\n            {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h5\">{title}</Typography>} action={secondary} />}\r\n            {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant=\"h4\">{title}</Typography>} action={secondary} />}\r\n\r\n            {/* content & header divider */}\r\n            {title && (\r\n                <Divider\r\n                    sx={{\r\n                        opacity: 1,\r\n                        borderColor: theme.palette.primary.light\r\n                    }}\r\n                />\r\n            )}\r\n\r\n            {/* card content */}\r\n            {content && (\r\n                <CardContent sx={{ p: 2.5 }} className={contentClass}>\r\n                    {children}\r\n                </CardContent>\r\n            )}\r\n            {!content && children}\r\n        </Card>\r\n    );\r\n};\r\n\r\nSubCard.propTypes = {\r\n    children: PropTypes.node,\r\n    content: PropTypes.bool,\r\n    contentClass: PropTypes.string,\r\n    darkTitle: PropTypes.bool,\r\n    secondary: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object]),\r\n    sx: PropTypes.object,\r\n    title: PropTypes.oneOfType([PropTypes.node, PropTypes.string, PropTypes.object])\r\n};\r\n\r\nSubCard.defaultProps = {\r\n    content: true\r\n};\r\n\r\nexport default SubCard;\r\n","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n// third-party\r\nimport { motion, useCycle } from 'framer-motion';\r\n\r\n//-----------------------|| ANIMATION BUTTON ||-----------------------//\r\n\r\nconst AnimateButton = React.forwardRef(({ children, type, direction, offset, scale }, ref) => {\r\n    let offset1;\r\n    let offset2;\r\n    switch (direction) {\r\n        case 'up':\r\n        case 'left':\r\n            offset1 = offset;\r\n            offset2 = 0;\r\n            break;\r\n        case 'right':\r\n        case 'dow':\r\n        default:\r\n            offset1 = 0;\r\n            offset2 = offset;\r\n            break;\r\n    }\r\n\r\n    const [x, cycleX] = useCycle(offset1, offset2);\r\n    const [y, cycleY] = useCycle(offset1, offset2);\r\n\r\n    switch (type) {\r\n        case 'rotate':\r\n            return (\r\n                <motion.div\r\n                    ref={ref}\r\n                    animate={{ rotate: 360 }}\r\n                    transition={{\r\n                        repeat: Infinity,\r\n                        repeatType: 'loop',\r\n                        duration: 2,\r\n                        repeatDelay: 0\r\n                    }}\r\n                >\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n        case 'slide':\r\n            if (direction === 'up' || direction === 'down') {\r\n                return (\r\n                    <motion.div ref={ref} animate={{ y: y }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <motion.div ref={ref} animate={{ x: x }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>\r\n                        {children}\r\n                    </motion.div>\r\n                );\r\n            }\r\n        case 'scale':\r\n        default:\r\n            if (typeof scale === 'number') {\r\n                scale = {\r\n                    hover: scale,\r\n                    tap: scale\r\n                };\r\n            }\r\n            return (\r\n                <motion.div ref={ref} whileHover={{ scale: scale.hover }} whileTap={{ scale: scale.tap }}>\r\n                    {children}\r\n                </motion.div>\r\n            );\r\n    }\r\n});\r\n\r\nAnimateButton.propTypes = {\r\n    children: PropTypes.node,\r\n    offset: PropTypes.number,\r\n    type: PropTypes.oneOf(['slide', 'scale', 'rotate']),\r\n    direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\r\n    scale: PropTypes.oneOfType([PropTypes.number, PropTypes.object])\r\n};\r\n\r\nAnimateButton.defaultProps = {\r\n    type: 'scale',\r\n    offset: 10,\r\n    direction: 'right',\r\n    scale: {\r\n        hover: 1,\r\n        tap: 0.9\r\n    }\r\n};\r\n\r\nexport default AnimateButton;\r\n","import React from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Card, CardContent, Grid, Skeleton } from '@material-ui/core';\r\n\r\n// style constant\r\nconst useStyles = makeStyles({\r\n    cardHeading: {\r\n        marginRight: '8px',\r\n        marginTop: '18px',\r\n        marginBottom: '14px'\r\n    }\r\n});\r\n\r\n//-----------------------|| SKELETON EARNING CARD ||-----------------------//\r\n\r\nconst EarningCard = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Grid container direction=\"column\">\r\n                    {/* <Grid item>\r\n                        <Grid container justifyContent=\"space-between\">\r\n                            <Grid item>\r\n                                <Skeleton variant=\"rect\" width={44} height={44} />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Skeleton variant=\"rect\" width={34} height={34} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid> */}\r\n                    <Grid item>\r\n                        <Skeleton variant=\"rect\" className={classes.cardHeading} height={20} />\r\n                    </Grid>\r\n                    {/* <Grid item>\r\n                        <Skeleton variant=\"rect\" height={30} />\r\n                    </Grid> */}\r\n                </Grid>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default EarningCard;\r\n","import PropTypes from 'prop-types';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\n// import { Grid, Typography, Button, Modal, Box, Card, Divider } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Stack,\r\n    Typography,\r\n    Modal,\r\n    Card,\r\n    Divider\r\n} from '@material-ui/core';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport SkeletonEarningCard from 'ui-component/cards/Skeleton/EarningCard';\r\nimport configData from 'config';\r\nimport axios from 'axios';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: '#fff',\r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n    },\r\n    avatar: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.largeAvatar,\r\n        backgroundColor: theme.palette.secondary[800],\r\n        marginTop: '8px'\r\n    },\r\n    avatarRight: {\r\n        ...theme.typography.commonAvatar,\r\n        ...theme.typography.mediumAvatar,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n        color: theme.palette.secondary[200],\r\n        zIndex: 1\r\n    },\r\n    cardHeading: {\r\n        fontSize: '1.5rem',\r\n        fontWeight: 500,\r\n        marginRight: '8px',\r\n        marginTop: '14px',\r\n        marginBottom: '6px'\r\n    },\r\n    subHeading: {\r\n        fontSize: '1rem',\r\n        fontWeight: 500,\r\n        color: theme.palette.secondary[200]\r\n    },\r\n    avatarCircle: {\r\n        cursor: 'pointer',\r\n        ...theme.typography.smallAvatar,\r\n        backgroundColor: theme.palette.secondary[200],\r\n        color: theme.palette.secondary.dark\r\n    },\r\n    circleIcon: {\r\n        transform: 'rotate3d(1, 1, 1, 45deg)'\r\n    },\r\n    menuItem: {\r\n        marginRight: '14px',\r\n        fontSize: '1.25rem'\r\n    },\r\n    cardAction: {\r\n        padding: '10px',\r\n        paddingTop: 0,\r\n        justifyContent: 'center'\r\n    },\r\n    primaryLight: {\r\n        color: theme.palette.primary[200],\r\n        cursor: 'pointer'\r\n    },\r\n    divider: {\r\n        marginTop: '12px',\r\n        marginBottom: '12px'\r\n    },\r\n    avatarSuccess: {\r\n        width: '32px',\r\n        height: '32px',\r\n        borderRadius: '5px',\r\n        backgroundColor: theme.palette.success.light,\r\n        color: theme.palette.success.dark,\r\n        marginLeft: '15px'\r\n    },\r\n    successDark: {\r\n        color: theme.palette.success.dark\r\n    },\r\n    avatarError: {\r\n        width: '32px',\r\n        height: '32px',\r\n        borderRadius: '5px',\r\n        backgroundColor: theme.palette.orange.light,\r\n        color: theme.palette.orange.dark,\r\n        marginLeft: '15px'\r\n    },\r\n    errorDark: {\r\n        color: theme.palette.orange.dark\r\n    },\r\n    loginInput: {\r\n        ...theme.typography.customInput\r\n    }\r\n}));\r\n\r\n//===========================|| DASHBOARD DEFAULT - EARNING CARD ||===========================//\r\n\r\nconst AddBrokerCard = () => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [brokers, setBrokers] = useState([]);\r\n    const [brokerID, setBrokerID] = useState(false);\r\n\r\n    const [publics, setPublic] = useState(\"\");\r\n    const [privates, setPrivate] = useState(\"\");\r\n    const [error, setError] = useState(null);\r\n\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const account = useSelector((state) => state.account);\r\n    \r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 600,\r\n        maxWidth: \"100%\",\r\n        bgcolor: 'background.paper',\r\n      };\r\n      \r\n    const handleClose = () => {\r\n        setBrokerID(false);\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleChangePublic = (text) => {\r\n        setPublic(text.target.value);\r\n    }\r\n\r\n    const handleChangePrivate = (text) => {\r\n        setPrivate(text.target.value);\r\n    }\r\n\r\n    const setSelf = () => {\r\n        axios.post(configData.API_SERVER + 'users/accounts', {\r\n            public_key: publics,\r\n            private_key: privates,\r\n            broker_id: brokerID[\"_id\"]\r\n        }, { headers: { Authorization: `${account.token}` } })\r\n        .then(() => handleClose())\r\n        .then(() => window.location.reload())\r\n        .catch(function (error) {\r\n            setError(error.response.data.msg);\r\n        });\r\n        return false;\r\n        // setError\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const url = configData.API_SERVER+\"brokers\";\r\n        axios.get(url, { headers: { Authorization: `${account.token}` } })\r\n          .then((response) => setBrokers(response.data))\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {isLoading ? (\r\n                <SkeletonEarningCard />\r\n            ) : (\r\n                <MainCard border={false} className={classes.card} contentClass={classes.content}>\r\n                    <Grid container direction=\"column\">\r\n                        <Grid item>\r\n                            <Button\r\n                                className={classes.cardHeading}\r\n                                disableElevation\r\n                                fullWidth\r\n                                size=\"large\"\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                onClick={() => { \r\n                                    setOpen(true);\r\n                                    // window.open(\"https://app.alpaca.markets/oauth/authorize?response_type=code&client_id=a6fa01dfdd7fa6f4ce4997e10ecad9d1&redirect_uri=\"+encodeURIComponent(window.location.href)+\"&state=1&scope=account:write%20trading\");\r\n                                }}\r\n                            >\r\n                                + Connect an account\r\n                            </Button>\r\n                            {/* <Typography className={classes.subHeading}></Typography> */}\r\n                            <Modal\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            sx={{margin: 2}}\r\n                            aria-labelledby=\"modal-modal-title\"\r\n                            aria-describedby=\"modal-modal-description\"\r\n                            >\r\n                                <MainCard sx={style}>\r\n                                    {brokerID === false ?\r\n                                    <div>\r\n                                        <Typography variant=\"h2\" id=\"modal-modal-title\">\r\n                                        Connect a new broker account from one of our available integrations!\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle1\" id=\"modal-modal-description\">\r\n                                            We're always expanding what we offer, check back later for new integrations!\r\n                                        </Typography>\r\n                                    </div> :\r\n                                    <div>\r\n                                        <Grid container direction=\"row\" alignItems=\"center\">\r\n                                            {/* <img height={50} width={50} src={brokerID.icon}></img> */}\r\n                                            <Typography variant=\"h2\" id=\"modal-modal-title\">\r\n                                                Connecting to {brokerID.name}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Typography variant=\"subtitle1\" id=\"modal-modal-description\">\r\n                                            All we need are your API keys, but don't worry they'll be save with us!\r\n                                        </Typography>\r\n                                        {/* <Typography variant=\"h2\" id=\"modal-modal-title\">\r\n                                        Connecting to {brokerID.name}\r\n                                        </Typography>\r\n                                        <Typography variant=\"subtitle1\" id=\"modal-modal-description\">\r\n                                            Good choice! All we need are your API keys, but don't worry they'll be save with us!\r\n                                        </Typography> */}\r\n                                    </div>\r\n                                    }\r\n                                    <Divider className={classes.divider} />\r\n                                    <Grid container spacing={gridSpacing} direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\">\r\n                                    {brokerID === false ? \r\n                                            brokers.map(item => (\r\n                                                <Grid item key={item.name} xs={12} md={6} onClick={() => setBrokerID(item)}>\r\n                                                    <SubCard\r\n                                                    sx={{cursor: \"pointer\"}}>\r\n                                                        <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\">\r\n                                                            <Grid item xs={6}>\r\n                                                                <Typography variant=\"h3\" >\r\n                                                                    {item.name}\r\n                                                                </Typography>\r\n                                                            </Grid>\r\n                                                            <Grid container item xs={6} justifyContent=\"right\">\r\n                                                                <img height={50} width={50} src={item.icon}></img>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </SubCard>\r\n                                                </Grid>\r\n                                            )\r\n                                    ) : \r\n                                    <Grid item>\r\n                                    <form>\r\n                                        {/* <Grid container direction=\"row\" justifyContent=\"space-evenly\" alignItems=\"center\">\r\n                                            <Grid item xs={6}>\r\n                                                <Typography variant=\"h3\" >\r\n                                                    {brokerID.name}\r\n                                                </Typography>\r\n                                            </Grid>\r\n                                            <Grid container xs={6} justifyContent=\"center\">\r\n                                                <img height={50} width={50} src={brokerID.icon}></img>\r\n                                            </Grid>\r\n                                        </Grid> */}\r\n                                        <FormControl fullWidth className={classes.loginInput}>\r\n                                            <InputLabel htmlFor=\"public-key\">Public Key</InputLabel>\r\n                                            <OutlinedInput\r\n                                                id=\"public-key\"\r\n                                                type=\"text\"\r\n                                                value={publics}\r\n                                                name=\"public_key\"\r\n                                                onChange={handleChangePublic}\r\n                                                label=\"Public Key\"\r\n                                                inputProps={{\r\n                                                    classes: {\r\n                                                        notchedOutline: classes.notchedOutline\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </FormControl>\r\n\r\n                                        <FormControl fullWidth className={classes.loginInput}>\r\n                                            <InputLabel htmlFor=\"private-key\">Private Key</InputLabel>\r\n                                            <OutlinedInput\r\n                                                id=\"private-key\"\r\n                                                type=\"text\"\r\n                                                value={privates}\r\n                                                name=\"private_key\"\r\n                                                onChange={handleChangePrivate}\r\n                                                label=\"Private Key\"\r\n                                                inputProps={{\r\n                                                    classes: {\r\n                                                        notchedOutline: classes.notchedOutline\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                            {error && \r\n                                                <FormHelperText error id=\"standard-weight-helper-text-email-login\">\r\n                                                    {error}\r\n                                                </FormHelperText>\r\n                                            }\r\n                                        </FormControl>\r\n\r\n                                        <AnimateButton onClick={setSelf}>\r\n                                            <Button\r\n                                                onClick={setSelf}\r\n                                                disableElevation\r\n                                                disabled={false}\r\n                                                fullWidth\r\n                                                size=\"large\"\r\n                                                // type=\"submit\"\r\n                                                variant=\"contained\"\r\n                                                color=\"secondary\"\r\n                                            >\r\n                                                Link Account\r\n                                            </Button>\r\n                                        </AnimateButton>\r\n\r\n                                    </form>\r\n                                    </Grid>\r\n                                }\r\n                                </Grid>\r\n                                </MainCard>\r\n                            </Modal>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </MainCard>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nAddBrokerCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default AddBrokerCard;\r\n","import PropTypes from 'prop-types';\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\n// import { Grid, Typography, Button, Modal, Box, Card, Divider } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n    Grid,\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormHelperText,\r\n    IconButton,\r\n    InputAdornment,\r\n    InputLabel,\r\n    OutlinedInput,\r\n    Stack,\r\n    Typography,\r\n    Modal,\r\n    Card,\r\n    Divider\r\n} from '@material-ui/core';\r\n\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// project imports\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport SkeletonEarningCard from 'ui-component/cards/Skeleton/EarningCard';\r\nimport configData from 'config';\r\nimport axios from 'axios';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n\r\n// style constant\r\nconst useStyles = makeStyles((theme) => ({\r\n    card: {\r\n        backgroundColor: theme.palette.secondary.main,\r\n        color: '#fff',\r\n        overflow: 'hidden',\r\n        position: 'relative',\r\n    },\r\n    cardHeading: {\r\n        fontSize: '1.5rem',\r\n        fontWeight: 500,\r\n        marginRight: '8px',\r\n        marginTop: '14px',\r\n        marginBottom: '6px',\r\n        color: '#fff'\r\n    },\r\n    subHeading: {\r\n        fontSize: '1rem',\r\n        fontWeight: 500,\r\n        color: theme.palette.secondary[200]\r\n    },\r\n    circleIcon: {\r\n        transform: 'rotate3d(1, 1, 1, 45deg)'\r\n    },\r\n    menuItem: {\r\n        marginRight: '14px',\r\n        fontSize: '1.25rem'\r\n    },\r\n    cardAction: {\r\n        padding: '10px',\r\n        paddingTop: 0,\r\n        justifyContent: 'center'\r\n    },\r\n    primaryLight: {\r\n        color: theme.palette.primary[200],\r\n        cursor: 'pointer'\r\n    },\r\n    divider: {\r\n        marginTop: '12px',\r\n        marginBottom: '12px'\r\n    },\r\n    successDark: {\r\n        color: theme.palette.success.dark\r\n    },\r\n    errorDark: {\r\n        color: theme.palette.orange.dark\r\n    },\r\n    loginInput: {\r\n        ...theme.typography.customInput\r\n    }\r\n}));\r\n\r\n//===========================|| DASHBOARD DEFAULT - EARNING CARD ||===========================//\r\n\r\nconst VerifyAccountCard = () => {\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n    const [brokers, setBrokers] = useState([]);\r\n    const [brokerID, setBrokerID] = useState(false);\r\n\r\n    const [publics, setPublic] = useState(\"\");\r\n    const [privates, setPrivate] = useState(\"\");\r\n\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n    const account = useSelector((state) => state.account);\r\n    \r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 600,\r\n        bgcolor: 'background.paper',\r\n      };\r\n\r\n    const sendEmail = () => {\r\n        axios.post(configData.API_SERVER+\"users/enable\", {}, {headers: { authorization: `${account.token}` }})\r\n        .then(response => {\r\n            console.log(response);\r\n        })\r\n    };\r\n\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            {isLoading ? (\r\n                <SkeletonEarningCard />\r\n            ) : (\r\n                <MainCard border={false} className={classes.card} contentClass={classes.content}>\r\n                    <Grid container direction=\"column\" justifyContent=\"center\">\r\n                        <Grid container item justifyContent=\"center\">\r\n                            <Typography className={classes.cardHeading} variant=\"h3\">Please verify your account!</Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                    className={classes.subHeading}\r\n                                    disableElevation\r\n                                    fullWidth\r\n                                    size=\"large\"\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    onClick={() => {sendEmail()}}\r\n                                >\r\n                                    Didn't get an email? Resend now! ↺\r\n                                </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </MainCard>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nVerifyAccountCard.propTypes = {\r\n    isLoading: PropTypes.bool\r\n};\r\n\r\nexport default VerifyAccountCard;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// material-ui\r\nimport { Grid, Typography, Chip } from '@material-ui/core';\r\nimport AddBrokerCard from 'views/dashboard/Default/AddBrokerCard';\r\n\r\nimport SubCard from 'ui-component/cards/SubCard';\r\n\r\nimport VerifyAccountCard from 'views/dashboard/Default/VerifyAccountCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport configData from 'config';\r\nimport { makeStyles, useTheme } from '@material-ui/styles';\r\n\r\n//-----------------------|| DEFAULT DASHBOARD ||-----------------------//\r\n\r\nconst Dashboard = () => {   \r\n    // const dispatcher = useDispatch(); \r\n    const account = useSelector((state) => state.account);\r\n    // const error = React.useState(false);\r\n    const search = window.location.search;\r\n    const params = new URLSearchParams(search);\r\n    const code = params.get('code');\r\n    const theme = useTheme();\r\n    const [enabled, setEnabled] = useState(null);\r\n    const [accounts, setAccounts] = useState([]);\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (code){\r\n            console.log(code);\r\n            axios.post(configData.API_SERVER+\"users/access_key?code=\"+code+\"&url=\"+encodeURIComponent(window.location.href), {}, {headers: { authorization: `${account.token}` }})\r\n            .then(response => {\r\n                console.log(response);\r\n                window.location = window.location.href.split('?')[0];\r\n            })\r\n        }\r\n      }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get(configData.API_SERVER+\"users/accounts\", {headers: { authorization: `${account.token}` }})\r\n        .then(response => {\r\n            console.log(response);\r\n            setAccounts(response.data);\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get(configData.API_SERVER+\"users/enabled\", {headers: { authorization: `${account.token}` }})\r\n        .then(response => {\r\n            setEnabled(response.data.is_enabled);\r\n        })\r\n    }, []);\r\n\r\n\r\n\r\n    return ( <Grid container spacing={gridSpacing}>\r\n        <Grid item xs={12}>\r\n            <Grid container spacing={gridSpacing}>\r\n                { accounts.map((item, index) => (\r\n                        <Grid item xs={12} md={6} lg={4} key={index}>\r\n                            <SubCard \r\n                                onClick={() => history.push(\"/utils/accounts/\"+item['_id'])}\r\n                                title={\r\n                                    <Grid container>\r\n                                        <Grid item xs={6}>\r\n                                            <Typography variant=\"h2\">\r\n                                                {item.name} \r\n                                            </Typography>\r\n                                            <Typography variant=\"h4\" >\r\n                                                {item.public_key}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid container item xs={6} justifyContent=\"right\">\r\n                                            <img height={50} width={50} src={item.icon}></img>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                }\r\n                                sx={{cursor: \"pointer\"}}>\r\n                                <Grid container>\r\n                                    <Grid container item xs={6}>\r\n                                        <Typography variant=\"h1\" >\r\n                                            {item.info.equity} \r\n                                        </Typography>\r\n                                    </Grid>\r\n                                    <Grid container item xs={6} justifyContent=\"right\">\r\n                                        {item.info.side ? <Chip label={item.info.change} color=\"success\"/>\r\n                                        : (item.info.side === false) ? <Chip label={item.info.change} color=\"error\"/>\r\n                                        : <></>\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </SubCard>\r\n                        </Grid> \r\n                    ))\r\n                }\r\n                {enabled === true &&\r\n                    <Grid item xs={12} md={6} lg={4}>\r\n                        <AddBrokerCard />\r\n                    </Grid>}\r\n                {enabled === false && \r\n                    <Grid item xs={12} md={6} lg={4}>\r\n                        <VerifyAccountCard />\r\n                    </Grid>\r\n                }\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n    );\r\n    \r\n};\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}